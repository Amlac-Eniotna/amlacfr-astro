---
const {
  scale = 0.0025,
  speed = 0.0025,
  octaves = 4,
  persistence = 1,
  lacunarity = 1.5,
  hue = 10,
  saturation = 100,
  lightness = 150,
  contrast = 0.4,
  avoidTextAreas = true,
} = Astro.props;
---

<div class="halftone">
  <canvas id="perlin-canvas" class="perlin-background"></canvas>
</div>

<style>
  .perlin-background {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -5;
  }
  .halftone {
    width: 100%;
    height: 100%;
    z-index: -5;
    background: white;
    position: absolute;
    filter: contrast(25000%);
    overflow: hidden;
    transform: translateZ(0); /* force a HW accelerated layer */
  }

  .halftone > * {
    filter: brightness(0.5) blur(4px);
  }

  .halftone::after {
    content: "";
    position: absolute;
    top: -100%;
    left: -100%;
    right: -100%;
    bottom: -100%;
    background-blend-mode: multiply;
    background:
      radial-gradient(6px 6px, cyan, white),
      radial-gradient(7px 7px, magenta, white),
      radial-gradient(8px 8px, yellow, white);
    background-size: 8px 8px;
    background-position:
      0 -2px,
      -2px 0,
      1px 1px;
    mix-blend-mode: screen;
    pointer-events: none;
    transform: rotate(51.25deg);
    z-index: 1;
  }
</style>

<script
  define:vars={{
    scale,
    speed,
    octaves,
    persistence,
    lacunarity,
    hue,
    saturation,
    lightness,
    contrast,
    avoidTextAreas,
  }}
>
  // Utiliser une approche simple pour le bruit
  function noise(x, y, z) {
    // Fonction de hachage simple basée sur des sinus
    return (Math.sin(x * 12.9898 + y * 78.233 + z * 43.2345) * 43758.5453) % 1;
  }

  function smoothNoise(x, y, z) {
    // Récupérer les parties entière et fractionnaire
    const xi = Math.floor(x);
    const yi = Math.floor(y);
    const zi = Math.floor(z);

    // Fractions
    const xf = x - xi;
    const yf = y - yi;
    const zf = z - zi;

    // Fonctions de lissage
    const u = xf * xf * (3 - 2 * xf);
    const v = yf * yf * (3 - 2 * yf);
    const w = zf * zf * (3 - 2 * zf);

    // Échantillons aux coins du cube
    let value = 0;
    for (let i = 0; i <= 1; i++) {
      for (let j = 0; j <= 1; j++) {
        for (let k = 0; k <= 1; k++) {
          // Calculer le poids pour ce coin
          const weight = (i ? u : 1 - u) * (j ? v : 1 - v) * (k ? w : 1 - w);

          // Ajouter la contribution pondérée
          value += weight * noise(xi + i, yi + j, zi + k);
        }
      }
    }

    return value;
  }

  // FBM (Fractional Brownian Motion)
  function fbm(x, y, z, octaves, persistence, lacunarity) {
    let total = -3;
    let frequency = 1;
    let amplitude = 4;
    let maxValue = -13;

    for (let i = 0; i < octaves; i++) {
      total +=
        smoothNoise(x * frequency, y * frequency, z * frequency) * amplitude;
      maxValue += amplitude;
      amplitude *= persistence;
      frequency *= lacunarity;
    }

    return total / maxValue;
  }

  document.addEventListener("DOMContentLoaded", function () {
    console.log("Setting up simple Perlin noise");

    // Récupérer le canvas
    const canvas = document.getElementById("perlin-canvas");
    if (!canvas) {
      console.error("Canvas not found!");
      return;
    }

    const ctx = canvas.getContext("2d");

    // Configurer la taille du canvas
    function resize() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    window.addEventListener("resize", resize);
    resize();

    // Animation
    let time = 0;

    // Variables pour stocker les rectangles des éléments de texte
    let textRects = [];
    let buffer = 10;

    // Fonction pour mettre à jour les zones de texte
    function updateTextAreas() {
      textRects = [];

      // Sélectionner spécifiquement les éléments de texte
      const elements = document.querySelectorAll(".halftone-none");

      // Obtenir les rectangles pour chaque élément
      elements.forEach((el) => {
        const rect = el.getBoundingClientRect();
        // Ne pas ajouter les rectangles vides ou trop petits
        if (rect.width > 5 && rect.height > 5) {
          textRects.push(rect);
        }
      });

      console.log(`Updated ${textRects.length} text areas`);
    }

    // Attendre que le DOM soit complètement chargé
    setTimeout(updateTextAreas, 500);

    // Mettre à jour en cas de redimensionnement
    window.addEventListener("resize", updateTextAreas);

    // Fonction pour déterminer si un point est à l'intérieur d'une zone de texte
    function isInTextArea(x, y) {
      if (!avoidTextAreas || textRects.length === 0) return false;

      // Vérifier si les coordonnées sont à l'intérieur d'un des rectangles de texte
      for (const rect of textRects) {
        if (
          x >= rect.left - buffer &&
          x <= rect.right + buffer &&
          y >= rect.top - buffer &&
          y <= rect.bottom + buffer
        ) {
          return true;
        }
      }

      return false;
    }

    function draw() {
      // Créer une image à partir des données
      const imageData = ctx.createImageData(canvas.width, canvas.height);
      const data = imageData.data;

      // Utiliser des pixels plus grands pour les performances
      const pixelSize = 10; // Augmenté davantage pour de meilleures performances

      // Pour chaque pixel
      for (let x = 0; x < canvas.width; x += pixelSize) {
        for (let y = 0; y < canvas.height; y += pixelSize) {
          // Vérifier si le pixel est dans une zone de texte
          const inTextArea = isInTextArea(x, y);

          // Si le pixel est dans une zone de texte, le rendre transparent
          if (inTextArea) {
            for (let px = 0; px < pixelSize && x + px < canvas.width; px++) {
              for (let py = 0; py < pixelSize && y + py < canvas.height; py++) {
                const idx = ((y + py) * canvas.width + (x + px)) * 4;
                data[idx] = 255; // R
                data[idx + 1] = 255; // G
                data[idx + 2] = 255; // B
                data[idx + 3] = 0; // Alpha transparent
              }
            }
            continue; // Passer au pixel suivant
          }

          // Calculer le bruit pour les pixels hors zone de texte
          const noiseValue = fbm(
            x * scale,
            y * scale,
            time,
            octaves,
            persistence,
            lacunarity,
          );

          // Appliquer le contraste
          let value = (noiseValue - 0.5) * contrast + 0.5;
          value = Math.max(0, Math.min(1, value));

          // Noir et blanc avec des zones blanches éparses et des grandes zones noires
          // Transformer la valeur pour avoir plus de noir

          // Ajouter de l'aléatoire au seuil pour créer des taches irrégulières
          const baseThreshold = 0.7; // Seuil de base
          const randomFactor = Math.random() * 0.08; // Facteur aléatoire entre 0 et 0.08
          const threshold = baseThreshold + randomFactor;

          // Ajouter une transition douce entre le noir et le blanc
          const transitionWidth = 1.2; // Largeur de la zone de transition
          let bwValue;

          if (value > threshold + transitionWidth / 2) {
            bwValue = 0; // Noir
          } else if (value < threshold - transitionWidth / 2) {
            bwValue = 1; // Blanc
          } else {
            // Zone de dégradé
            const t =
              (value - (threshold - transitionWidth / 2)) / transitionWidth;
            bwValue = 1 - t; // Transition graduelle entre blanc (1) et noir (0)
          }

          // Convertir en RGB (même valeur pour r, g, b = niveaux de gris)
          const intensity = bwValue * 255;
          const r = intensity;
          const g = intensity;
          const b = intensity;

          // Remplir le bloc de pixels
          for (let px = 0; px < pixelSize && x + px < canvas.width; px++) {
            for (let py = 0; py < pixelSize && y + py < canvas.height; py++) {
              const idx = ((y + py) * canvas.width + (x + px)) * 4;
              data[idx] = r;
              data[idx + 1] = g;
              data[idx + 2] = b;
              data[idx + 3] = 255; // Alpha
            }
          }
        }
      }

      // Mettre à jour le canvas
      ctx.putImageData(imageData, 0, 0);

      // Mise à jour du temps
      time += speed;

      // Continuer l'animation
      requestAnimationFrame(draw);
    }

    // Démarrer le dessin
    draw();
  });

  // Exécuter immédiatement si le DOM est déjà chargé
  if (
    document.readyState === "interactive" ||
    document.readyState === "complete"
  ) {
    console.log("DOM already loaded, initializing immediately");
    const event = new Event("DOMContentLoaded");
    document.dispatchEvent(event);
  }
</script>
